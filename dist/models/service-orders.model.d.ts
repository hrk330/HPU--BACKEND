import { Entity } from '@loopback/repository';
import { CrashReports } from './crash-reports.model';
import { UserDocs } from './user-docs.model';
import { ServiceProvider } from './service-provider.model';
export declare class ServiceOrders extends Entity {
    serviceOrderId: string;
    serviceProviderId: string;
    serviceProviderUsername?: string;
    serviceProviderPhoneNumber?: string;
    serviceProviderProfilePic?: string;
    userId: string;
    userName: string;
    appUserPhoneNumber?: string;
    appUserProfilePic?: string;
    userEmail: string;
    serviceProviderName?: string;
    serviceProviderEmail?: string;
    serviceName?: string;
    serviceType?: string;
    vehicleType?: string;
    vehicleId?: string;
    orderType?: string;
    companyId?: string;
    companyName?: string;
    companyEmail?: string;
    companyPhoneNumber?: string;
    companyProfilePic?: string;
    pickupLocation?: string;
    pickupLocationCoordinates?: string;
    dropLocation?: string;
    dropLocationCoordinates?: string;
    distance: number;
    extraDistance?: number;
    instructions?: string;
    promoId: string;
    promoCode?: string;
    discountAmount?: number;
    discountValue?: number;
    discountType?: string;
    status: string;
    taxPercentage: number;
    taxAmount: number;
    grossAmount: number;
    netAmount: number;
    amountPaidByCustomer: number;
    platformFee: number;
    serviceFee: number;
    serviceFeePaid: boolean;
    paymentType?: string;
    distanceAmount: number;
    paymentMethod?: string;
    rating: number;
    accidental?: boolean;
    confirmedAt?: Date;
    scheduledAt?: Date;
    expectedAt?: Date;
    acceptedAt?: Date;
    arrivedAt?: Date;
    startedAt?: Date;
    payedAt?: Date;
    completedAt?: Date;
    serviceProvider: ServiceProvider;
    proofOfWorkDocIds: string[];
    requirements: string[];
    proofOfWorkDocs: UserDocs[];
    additionalNote?: string;
    cancellationReason?: string;
    createdAt?: Date;
    updatedAt?: Date;
    serviceId: string;
    crashReport: CrashReports;
    constructor(data?: Partial<ServiceOrders>);
}
export interface ServiceOrdersRelations {
}
export type ServiceOrdersWithRelations = ServiceOrders & ServiceOrdersRelations;
