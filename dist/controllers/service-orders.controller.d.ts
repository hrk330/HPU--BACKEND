import { Count, Filter, Where } from '@loopback/repository';
import { OrderRequest, ServiceOrders, TransactionResponse } from '../models';
import { AppUsersRepository, CompanyRepository, PaymentRepository, PromoCodesRepository, ServiceOrdersRepository, ServiceProviderRepository, ServicesRepository, TransactionRepository } from '../repositories';
export declare class ServiceOrdersController {
    serviceOrdersRepository: ServiceOrdersRepository;
    appUsersRepository: AppUsersRepository;
    servicesRepository: ServicesRepository;
    paymentRepository: PaymentRepository;
    promoCodesRepository: PromoCodesRepository;
    serviceProviderRepository: ServiceProviderRepository;
    transactionRepository: TransactionRepository;
    companyRepository: CompanyRepository;
    private serviceOrdersUtils;
    constructor(serviceOrdersRepository: ServiceOrdersRepository, appUsersRepository: AppUsersRepository, servicesRepository: ServicesRepository, paymentRepository: PaymentRepository, promoCodesRepository: PromoCodesRepository, serviceProviderRepository: ServiceProviderRepository, transactionRepository: TransactionRepository, companyRepository: CompanyRepository);
    adminCreateOrder(serviceOrders: Omit<ServiceOrders, 'serviceOrderId'>): Promise<string>;
    create(serviceOrders: Omit<ServiceOrders, 'serviceOrderId'>): Promise<ServiceOrders>;
    sendOrderNotification(endpoint: string, title: string, body: string, order: ServiceOrders): Promise<void>;
    updateOrder(serviceOrders: ServiceOrders): Promise<string>;
    completeOrder(orderRequest: OrderRequest): Promise<string>;
    adminCompleteOrder(orderRequest: OrderRequest): Promise<string>;
    initiatePayment(orderRequest: OrderRequest): Promise<string>;
    processCardPaymentFailure(transactionResponse: TransactionResponse, serviceOrderId: string): Promise<string>;
    processCardPaymentSuccess(transactionResponse: TransactionResponse, serviceOrderId: string): Promise<string>;
    completePayment(orderRequest: OrderRequest): Promise<string>;
    sendAppUserOrderUpdateNotification(serviceOrders: ServiceOrders): Promise<void>;
    sendServiceProviderOrderUpdateNotification(serviceOrders: ServiceOrders, isCreatedByAdmin: boolean): Promise<void>;
    rateOrder(serviceOrder: ServiceOrders): Promise<string>;
    serviceProviderCancelOrder(serviceOrders: ServiceOrders): Promise<string>;
    appUserCancelOrder(serviceOrders: ServiceOrders): Promise<string>;
    adminUserCancelOrder(serviceOrders: ServiceOrders): Promise<string>;
    appUserApplyPromoCode(serviceOrders: ServiceOrders): Promise<string>;
    adminUserApplyPromoCode(serviceOrders: ServiceOrders): Promise<string>;
    find(serviceProviderId: string, filter?: Filter<ServiceOrders>): Promise<Object>;
    getAllOrdersForAdmin(filter?: Filter<ServiceOrders>): Promise<Object>;
    getOrderDetailsForAdmin(serviceOrderId: string): Promise<Object>;
    count(where?: Where<ServiceOrders>): Promise<Count>;
    sendNotification(token: string): Promise<string>;
    findByServiceProviderId(serviceOrderId: string, serviceProviderId: string): Promise<string>;
    findByAppUserId(serviceOrderId: string, appUserId: string, filter?: Filter<ServiceOrders>): Promise<string>;
    findUserServiceOrders(appUserId: string, filter?: Filter<ServiceOrders>): Promise<string>;
    getCurrentOrder(userType: string, userId: string, orderType: string): Promise<string>;
    updateById(id: string, serviceOrders: ServiceOrders): Promise<void>;
    replaceById(id: string, serviceOrders: ServiceOrders): Promise<void>;
    deleteById(id: string): Promise<void>;
}
